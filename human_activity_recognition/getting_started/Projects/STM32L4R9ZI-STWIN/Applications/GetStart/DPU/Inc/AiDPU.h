/**
  ******************************************************************************
  * @file    AiDPU.h
  * @author  STMicroelectronics - AIS - MCD Team
  * @brief   Digital processing Unit specialized for the Cube.AI library  *
  * This DPU process the data using Ai library generated by Cube.AI.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
  
#ifndef DPU_INC_AIDPU_H_
#define DPU_INC_AIDPU_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "ADPU.h"
#include "ADPU_vtbl.h"
#include "network.h"
#include "network_data.h"
#include "config.h" // todo something to leave DPU not dependent on application header file

#define AI_MNETWORK_NUMBER         (1U)

#define AI_DPU_NB_AXIS             (3U)
#define AI_DPU_SHAPE_SIZE          (4U)
#define AI_DPU_SHAPE_BATCH_MAX     (1U)
#define AI_DPU_SHAPE_HEIGHT_MAX    (1U)
#define AI_DPU_SHAPE_WIDTH_MAX     (1U)
#define AI_DPU_SHAPE_CHANNEL_MAX   (100U)
#define AI_DPU_DATA_TYPE           (AI_BUFFER_FMT_TYPE_FLOAT)

#define AI_DPU_X_CUBE_AI_API_MAJOR (1)
#define AI_DPU_X_CUBE_AI_API_MINOR (2)
#define AI_DPU_X_CUBE_AI_API_MICRO (0)

#define AI_DPU_NB_MAX_INPUT       (1U)
#define AI_DPU_NB_MAX_OUTPUT      (2U)
/**
 * Create  type name for _AiDPU_t.
 */
typedef struct _AiDPU_t AiDPU_t;

/**
 * AiDPU_t internal state.
 * It declares only the virtual table used to implement the inheritance.
 */
struct _AiDPU_t {
  /**
   * Base class object.
   */
  ADPU super;

  /**
	* AI network informations & handler
	*/
  struct ai_network_exec_ctx {
	  ai_handle handle;
	  ai_network_report report;
  }net_exec_ctx[AI_MNETWORK_NUMBER];

  /**
	* AI network activation buffer
	*/
  AI_ALIGNED(32)
  uint8_t activation_buffer[AI_NETWORK_DATA_ACTIVATION_1_SIZE];

#ifndef  AI_NETWORK_INPUTS_IN_ACTIVATIONS
  /**
  * AI network input
  */
  AI_ALIGNED(4)
  uint8_t in[AI_NETWORK_IN_1_SIZE_BYTES];
#endif

#ifndef  AI_NETWORK_INPUTS_OUT_ACTIVATIONS
  /**
  * AI network output
  */
  AI_ALIGNED(4)
  uint8_t out1[AI_NETWORK_OUT_1_SIZE_BYTES];
#if (AI_NETWORK_OUT_NUM==2)
  AI_ALIGNED(4)
  uint8_t out2[AI_NETWORK_OUT_2_SIZE_BYTES];
#endif
#endif

  /**
   * Specifies AI processing scale factor.
   */
  float scale;

};

/* Public API declaration */
/**************************/

/**
 * Allocate an instance of AiDPU_t in the heap.
 *
 * @return a pointer to the generic object ::IDPU if success,
 * or NULL if out of memory error occurs.
 */
IDPU *AiDPUAlloc(void);

/**
 * Allocate an instance of AiDPU_t in a memory block specified by the application.
 * The size of the memory block must be greater or equal to sizeof(AiDPU_t).
 * This allocator allows the application to avoid the dynamic allocation.
 *
 * \code
 * AiDPU_t dpu;
 * AiDPUStaticAlloc(&dpu);
 * \endcode
 *
 * @param p_mem_block [IN] specify a memory block allocated by the application.
 *        The size of the memory block must be greater or equal to sizeof(AiDPU_t).
 * @return a pointer to the generic object ::IDPU if success,
 * or NULL if out of memory error occurs.
 */
IDPU *AiDPUStaticAlloc(void *p_mem_block);

/**
 * Compute the size in byte of the buffer that the application need to allocate and pass
 * to the DPU when it is attached to a sensor or to another DPU.
 *
 * \anchor fig400 \image html 400_api_DPUSetInputParams.png "Fig.400 - API - AiDPUSetInputParam() " width=630px
 *
 * @param _this [IN] specifies a pointer to the object.
 * @param cb_items [IN] specifies the number of items for the ::CircularBuffer used by the DPU.
 *                      An item of the ::CirculaBuffer is used to store `size` elements from the input source.
 * @return The size in byte of the buffer need by the DPU to acquire and process input data if success, zero otherwise.
 */
uint16_t AiDPUSetStreamsParam(AiDPU_t *_this, uint8_t cb_items);


/**
 * Set the processing mode for the DPU. It specifies to the DPU if a new signal is used
 * to learn and improve the model, or to detect anomalies.
 *
 * @param _this [IN] specifies a pointer to the object.
 * @param sensi [IN] specifies the sensitivity of the sensor
 * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
 */
sys_error_code_t AiDPUSetSensitivity(AiDPU_t *_this, float sensi);

/**
 * load X-CUBE-AI model for DPU processing .
 *
 * @param _this [IN] specifies a pointer to the object.
 * @param name [IN] specifies the model name
 * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
 */
sys_error_code_t AiDPULoadModel(AiDPU_t *_this, const char *name);

/**
 * release X-CUBE-AI model for DPU processing .
 *
 * @param _this [IN] specifies a pointer to the object.
 * @param name [IN] specifies the model name
 * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
 */
sys_error_code_t AiDPUReleaseModel(AiDPU_t *_this);

/**
 * Partial reset of the DPU internal state: all input and output buffers are re-initialized to prepare
 * the DPU to process a new stream of data.
 *
 * @param _this [IN] specifies a pointer to the object.
 * @return SYS_NO_ERROR_CODE if success, an error code otherwise.
 */
sys_error_code_t AiDPUPrepareToProcessData(AiDPU_t *_this);


#ifdef __cplusplus
}
#endif

#endif /* DPU_INC_AiDPU_H_ */
